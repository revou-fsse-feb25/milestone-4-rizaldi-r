// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Currency {
  USD
  EUR
  GBP
  JPY
  CAD
  AUD
  CHF
  CNY
  INR
  BRL
  RUB
  ZAR
  IDR
  SGD
  NZD
  MXN
  KRW
  SEK
  NOK
  DKK
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REVERSED
}

// User table
model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique @db.VarChar(50)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  email        String   @unique @db.VarChar(100)
  firstName    String   @map("first_name") @db.VarChar(50)
  lastName     String   @map("last_name") @db.VarChar(50)
  userRole     UserRole @map("user_role")
  refreshToken String?  @map("refresh_token")
  lastLogin    DateTime @default(now()) @map("last_login")
  
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  accounts Account[]
}

// Account table
model Account {
  id            Int           @id @default(autoincrement())
  userId        Int           @map("user_id")
  accountName   String        @unique @map("account_name") @db.VarChar(50)
  accountNumber String        @unique @map("account_number") @db.VarChar(20)
  balance       Decimal       @default(0.00) @db.Decimal(18, 2)
  currency      Currency      @default(USD)
  accountStatus AccountStatus @default(ACTIVE) @map("account_status")

  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  from_transactions Transaction[] @relation("FromAccount")
  to_transactions   Transaction[] @relation("ToAccount")
}

// Transaction table
model Transaction {
  id                Int               @id @default(autoincrement())
  fromAccountId     Int?              @map("from_account_id")
  toAccountId       Int?              @map("to_account_id")
  amount            Decimal           @db.Decimal(18, 2)
  transactionType   TransactionType   @map("transaction_type")
  transactionStatus TransactionStatus @default(PENDING) @map("transaction_status")
  transactionDate   DateTime          @default(now()) @map("transaction_date") @db.Timestamptz(6)
  description       String?           @db.VarChar(255)

  createdAt         DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  fromAccount Account? @relation("FromAccount", fields: [fromAccountId], references: [id], onDelete: Cascade)
  toAccount   Account? @relation("ToAccount", fields: [toAccountId], references: [id], onDelete: Cascade)
}
